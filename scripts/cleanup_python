#!/usr/bin/env bash

#set -x
# this script is sourced, so no set -e

# check if this was called by source to prevent incorrect usage
(return 0 2>/dev/null) && sourced=1 || sourced=0

if [ $sourced -eq 0 ]; then
    echo "You must source this script. Do not run it directly."
    exit 1    
fi

if [ -n "${ZSH_VERSION:-}" ]; then
    # assume Zsh
    # not sure how to fix the virtualenvwrapper.sh problems with error and unset variable handling under zsh
    # do nothing
    :
elif [ -n "{$BASH_VERSION:-}" ]; then
    # assume Bash
    # https://unix.stackexchange.com/questions/383541/how-to-save-restore-all-shell-options-including-errexit
    # the virtualenvwrapper.sh scripts don't do happy things with set -euo pipefail
    # space before to prevent them from ending on the command line
    OLDOPTS="$(set +o | sed -e 's/^/ /')"
    case $- in
      *e*) OLDOPTS="$OLDOPTS; set -e";;
      *) OLDOPTS="$OLDOPTS; set +e";;
    esac

else
    # assume something else?
    :
fi

REPONAME=$(pwd | sed -e 's|^/||' -e 's|/|__|g') #make a unique virtualenv based off the current path

# first see if the directory doesn't even exist
# then nothing to clean
if [[ -d ~/.virtualenvs/"$REPONAME" ]]; then
    

    # see if it's safe to remove modules first 
    # don't use src symbolic link in case it is broken.
    scripts/check_for_changes ~/.virtualenvs/"$REPONAME"
    RET=$?
    if [[ $RET -ne 0 ]]; then
        return
    fi
    # go ahead and remove all the modules
    echo "Cleanup seems likely to be safe"
    
    set +eu  # virtualenvwrapper.sh does not work well with -e or -u
    source $(locate virtualenvwrapper.sh | tail -n 1)
    
    # deactivate sometimes warns about it finding the conda version. This seems to not be an issue.
    deactivate
    
    rmvirtualenv $REPONAME

else
    echo "Nothing to clean up"
fi

    
#restore settings
if [ -n "{$BASH_VERSION:-}" ]; then
    # assume Bash
    eval "${OLDOPTS}"
fi

